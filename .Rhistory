kruskal.test(Madrid$valor ~ Tecnopuc$valor)
summary(Madrid$valor)
Summary(Tecnopuc$valor)
summary(Madrid$valor)
Summary(Tecnopuc$valor)
summary(Madrid$valor)
Summary(Tecnopuc$valor)
summary(Madrid$valor)
Summary(Tecnopuc$valor)
library(dplyr)
summary(Madrid$valor)
library(dplyr)
summary(Madrid$valor)
summary(Tecnopuc$valor)
kruskal.test(Madrid$valor ~ Tecnopuc$valor)
kruskal.test(Madrid$valor,Tecnopuc$valor)
unlink('Marieli/Kruskal_cache', recursive = TRUE)
knit_with_parameters('~/Marieli/Kruskal.Rmd', encoding = 'UTF-8')
library(sp)
setwd("~/")
knit_with_parameters('~/Kruskal.Rmd', encoding = 'UTF-8')
setwd("~/")
bookdown:::serve_book()
library(sp)
install.packages(sp)
remove.packages("sp", lib="~/R/win-library/3.5")
install.packages("C:/Users/Jacob/Downloads/sp-master.zip", repos = NULL, type = "win.binary")
library(lib)
install.packages("C:/Users/Jacob/Downloads/sp-master.zip", repos = NULL, type = "win.binary")
install.packages("sp")
library(sp)
library(spatial, lib.loc = "C:/Program Files/Microsoft/R Open/R-3.5.2/library")
library(knitr)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/Kruskal.Rmd', encoding = 'UTF-8')
setwd("~/")
install.packages("rsconnect")
install.packages("reader")
library(swirl)
install.packages("swirl")
library(swirl)
swirl()
library(swirl)
install_from_swirl("Regression Models")
swirl()
0
bey()
bey
skip()
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lw=3, col='red')
abline(regrline, lwd=3, col='red')
summary(regrline)
fit <- lm(child ~ parent, galton)
fit$residuals
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coefficients[1]
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
skip()
all.equal(lhs,rhs)
varChild <- var(lhs,rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(ols.slope, ols.ic)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, sum(varRes,varRes))
all.equal(varChild, varRes+varRes)
all.equal(varChild,varEst+varRes)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit)
mean(efit$residuals)
cov(attenu$mag)
cov(efit$residuals ~ attenu$mag)
skyp()
skip()
cov(efit$residuals, attenu$dist)
swirl()
install.packages("rmarkdown")
library(markdown)
install.packages("knitr")
install.packages("Rtools")
install.packages("Miktex")
install.packages("Rtool")
install.packages("~/Rtools35.exe", repos = NULL)
library(sp)
install.packages("Rtools")
install.packages("~/Rtools35.exe", repos = NULL)
install.packages("repo")
install.packages("~/Rtools35.exe", repos = NULL)
install.packages("Rtools")
library(Rtools)
install.packages("~/Rtools35.exe", repos = NULL)
install.packages("Rtools", repos = NULL, type="source")
unlink('teste_cache', recursive = TRUE)
knit_with_parameters('~/Untitled/teste 4.Rmd')
install.packages("latexpdf")
swirl()
library(swirl)
swirl()
simbias <- function(seed=8765){
# The default seed guarantees a nice histogram. This is the only1
# reason that accepting the default, x1c <- simbias(), is required in the lesson.
# The effect will be evident with other seeds as well.
set.seed(seed)
temp <- rnorm(100)
# Point A
x1 <- (temp + rnorm(100))/sqrt(2)
x2 <- (temp + rnorm(100))/sqrt(2)
x3 <- rnorm(100)
# Function to simulate regression of y on 2 variables.
f <- function(k){
# Point B
y <- x1 + x2 + x3 + .3*rnorm(100)
# Point C
c(lm(y ~ x1 + x2)$coef[2],
lm(y ~ x1 + x3)$coef[2])
}
# Point D
sapply(1:150, f)
}
# Illustrate the effect of bogus regressors on residual squared error.
bogus <- function(){
temp <- swiss
# Add 41 columns of random regressors to a copy of the swiss data.
for(n in 1:41){temp[,paste0("random",n)] <- rnorm(nrow(temp))}
# Define a function to compute the deviance of Fertility regressed
# on all regressors up to column n. The function, deviance(model), computes
# the residual sum of squares of the model given as its argument.
f <- function(n){deviance(lm(Fertility ~ ., temp[,1:n]))}
# Apply f to data from n=6, i.e., the legitimate regressors,
# through n=47, i.e., a full complement of bogus regressors.
rss <- sapply(6:47, f)
# Display result.
plot(0:41, rss, xlab="Number of bogus regressors.", ylab="Residual squared error.",
main="Residual Squared Error for Swiss Data\nUsing Irrelevant (Bogus) Regressors",
pch=21, bg='red')
}
plot(0:41, rss, xlab="Number of bogus regressors.", ylab="Residual squared error.",
+        main="Residual Squared Error for Swiss Data\nUsing Irrelevant (Bogus) Regressors",
+        pch=21, bg='red')
plot(0:41, rss, xlab="Number of bogus regressors.", ylab="Residual squared error.", main="Residual Squared Error for Swiss Data\nUsing Irrelevant (Bogus) Regressors", pch=21, bg='red')
install.packages("latex2exp")
library("knitr", lib.loc="~/R/win-library/3.5")
install.packages("knitLatex")
library("knitr", lib.loc="~/R/win-library/3.5")
detach("package:knitr", unload=TRUE)
library("knitr", lib.loc="~/R/win-library/3.5")
detach("package:knitr", unload=TRUE)
install.packages("knitr")
library("knitLatex", lib.loc="~/R/win-library/3.5")
library("knitr", lib.loc="~/R/win-library/3.5")
detach("package:knitLatex", unload=TRUE)
detach("package:knitr", unload=TRUE)
install.packages("bookdown")
install.packages("tufte")
library("sp", lib.loc="~/R/win-library/3.5")
install.packages("rattle")
install.packages("randomForest")
library("sp", lib.loc="~/R/win-library/3.5")
detach("package:sp", unload=TRUE)
library("sp", lib.loc="~/R/win-library/3.5")
install.packages("sp")
library("sp", lib.loc="~/R/win-library/3.3")
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
options(scipen=999)
setwd("~/Artigo_Frontiers")
library(dplyr)
library(plotly)
library(ggplot2)
library(tidyr)
library(magrittr)
library(plotrix)
library(rgl)
library(car)
library(lubridate)
library(ggplot2)
library(GGally)
library(corrplot)
library(corrgram)
library(ppcor)
library(plyr)
library(ggpubr)
library(fastcluster)
library(cluster)
.Unianalysis = function (x) {
y <- as.data.frame(table(x))
y <- arrange(y, desc(y$Freq))
return(y)
}
#Import Data
library(readr)
IMI <- read_delim("IMI.csv", ";", escape_double = FALSE,
trim_ws = TRUE)
IPT <- read_delim("IPT.csv", ";", escape_double = FALSE,
trim_ws = TRUE)
Estados <- read_delim("Estados.csv", ";", escape_double = FALSE, trim_ws = TRUE)
IMI_IPT <- merge(IMI, IPT, by = "CD_PROGRAMA_IES", all.x = TRUE)
write.csv2(IMI_IPT, file = "IMI_IPT.csv", fileEncoding = "UTF-8")
IMI_IPT_Tidy <- read_delim("IMI_IPT_Tidy.csv",
";", escape_double = FALSE, col_types = cols(ANO_INICIO_PROGRAMA = col_number(),
App_prof = col_number(), CD_CONCEITO_PROGRAMA = col_number(),
CP = col_number(), CS_STATUS_JURIDICO = col_number(),
Colabora_cientifica = col_number(),
Count = col_number(), DS_DEPENDENCIA_ADMINISTRATIVA = col_number(),
Forma_discente = col_number(), Forma_docente = col_number(),
Indice_MI = col_number(), Indice_PT = col_number(),
NM_MODALIDADE_PROGRAMA = col_number(),
Patente_prof = col_number(), Produto_prof = col_number(),
Prof_Perm = col_number(), Soma_Aplicativos = col_number(),
Soma_patentes = col_number(), Soma_produtos = col_number()),
trim_ws = TRUE)
IMI_IPT_T1<- IMI_IPT_Tidy %>%
mutate(new_indice_PT =    sum(Soma_Aplicativos,Soma_produtos,Soma_patentes)/Prof_Perm)
M_State <- merge(IMI_IPT_T1, Estados, by = "CD_PROGRAMA_IES", all.x = TRUE)
write.csv2(IMI_IPT_T1, file = "IMI_IPT_T1.csv", fileEncoding = "UTF-8")
write.csv2(M_State, file = "M_State.csv", fileEncoding = "UTF-8")
cor(IMI_IPT_T1$Indice_MI, IMI_IPT_T1$new_indice_PT, method = "pearson")
IMI_IPT_Full_IPT <- IMI_IPT_T1 %>%
filter(Soma_Aplicativos > 0, Soma_patentes >0, Soma_patentes > 0)
dim(IMI_IPT_Full_IPT)
summary(IMI_IPT_Full_IPT)
corrplot(cor(IMI_IPT_Full_IPT[,3:21]), method = "color", tl.cex = 0.5)
cor(IMI_IPT_Full_IPT$Indice_MI, IMI_IPT_Full_IPT$new_indice_PT, method = "pearson")
IMI_IPT_M2002 <- IMI_IPT_T1 %>%
filter(ANO_INICIO_PROGRAMA > 2002)
dim(IMI_IPT_M2002)
summary(IMI_IPT_M2002)
corrplot(cor(IMI_IPT_M2002[,3:22]), method = "color", tl.cex = 0.5)
cor(IMI_IPT_M2002$Indice_MI, IMI_IPT_M2002$new_indice_PT, method = "pearson")
IMI_IPT_PRIV <- IMI_IPT_T1 %>%
filter(DS_DEPENDENCIA_ADMINISTRATIVA == 1)
dim(IMI_IPT_PRIV)
summary(IMI_IPT_PRIV)
corrplot(cor(IMI_IPT_PRIV[,3:22]), method = "color", tl.cex = 0.5)
cor(IMI_IPT_PRIV$Indice_MI, IMI_IPT_PRIV$Indice_PT, method = "pearson")
## Variaveis
M <- IMI_IPT_T1
# mu da amostra de produção de aplicativo
Media_Indice_MI <- mean(M$Indice_MI, na.rm = TRUE)
## mu de diversidade do universo: mu
Media_Prod_tecno <- mean(M$Indice_PT, na.rm = TRUE)
Context_m_acima <-
M %>%
dplyr::filter(Indice_MI > Media_Indice_MI,
Indice_PT > Media_Prod_tecno)
summary(Context_m_acima)
corrplot(cor(Context_m_acima[, 3:22]), method = "color", tl.cex = 0.5)
Contex_2002_Above <- IMI_IPT_M2002 %>%
dplyr::filter(Indice_MI > Media_Indice_MI,
Indice_PT > Media_Prod_tecno) %>%
dplyr::select(CD_CONCEITO_PROGRAMA, Indice_MI, new_indice_PT)
Distances <- dist(Contex_2002_Above)
dendrogram <- hclust(Distances)
plot(dendrogram)
rect.hclust(dendrogram, k=6, border=1:3)
plot(hclust(Distances, method="ward.D"), main="ward.D", hang=-1)
rect.hclust(hclust(Distances, method="ward.D"), k=5, border=1:5)
plot(hclust(Distances, method="centroid"), main="centroid", hang=-1)
rect.hclust(hclust(Distances, method="centroid"), k=5, border=1:5)
View(IMI_IPT_M2002)
By_State <-
M_State %>%
dplyr::group_by(SG_UF_PROGRAMA) %>%
dplyr::summarise(Patentes_total = sum(Soma_patentes),
Produtos_total = sum(Soma_produtos),
Aplicativos_total = sum(Soma_Aplicativos),
Programas_total = n_distinct(CD_PROGRAMA_IES),
Professores_total = sum(Prof_Perm),
Indice_MI_S = sum(Indice_MI)/Programas_total,
Forma_docente = 1 / sum(Forma_docente),
Forma_discente = 1/ sum(Forma_discente),
Colabora_cientifica = 1/ sum(Colabora_cientifica),
Contex_Profissa = 1/ sum(CP)) %>%
mutate(Indice_MI_S = ((Forma_docente+Forma_discente+Colabora_cientifica+Contex_Profissa)/4)/Programas_total,
Indice_PT_S = (Patentes_total+Produtos_total+ Aplicativos_total)/Programas_total)
cor(By_State$Indice_MI_S, By_State$Indice_PT_S, method = "spearman")
cor(By_State$Forma_docente, By_State$Indice_PT_S, method = "spearman")
DT::datatable(By_State)
IMI_IPT_Tidy <- read_delim("IMI_IPT_Tidy.csv",
";", escape_double = FALSE, col_types = cols(ANO_INICIO_PROGRAMA = col_number(),
App_prof = col_number(), CD_CONCEITO_PROGRAMA = col_number(),
CP = col_number(), CS_STATUS_JURIDICO = col_number(),
Colabora_cientifica = col_number(),
Count = col_number(), DS_DEPENDENCIA_ADMINISTRATIVA = col_number(),
Forma_discente = col_number(), Forma_docente = col_number(),
Indice_MI = col_number(), Indice_PT = col_number(),
NM_MODALIDADE_PROGRAMA = col_number(),
Patente_prof = col_number(), Produto_prof = col_number(),
Prof_Perm = col_number(), Soma_Aplicativos = col_number(),
Soma_patentes = col_number(), Soma_produtos = col_number()),
trim_ws = TRUE)
IMI_IPT_T1<- IMI_IPT_Tidy %>%
mutate(new_indice_PT = (Soma_Aplicativos+Soma_produtos+Soma_patentes)/Prof_Perm)
M_State <- merge(IMI_IPT_T1, Estados, by = "CD_PROGRAMA_IES", all.x = TRUE)
write.csv2(IMI_IPT_T1, file = "IMI_IPT_T1.csv", fileEncoding = "UTF-8")
write.csv2(M_State, file = "M_State.csv", fileEncoding = "UTF-8")
cor(IMI_IPT_T1$Indice_MI, IMI_IPT_T1$new_indice_PT, method = "pearson")
IMI_IPT_Full_IPT <- IMI_IPT_T1 %>%
filter(Soma_Aplicativos > 0, Soma_patentes >0, Soma_patentes > 0)
dim(IMI_IPT_Full_IPT)
summary(IMI_IPT_Full_IPT)
corrplot(cor(IMI_IPT_Full_IPT[,3:21]), method = "color", tl.cex = 0.5)
cor(IMI_IPT_Full_IPT$Indice_MI, IMI_IPT_Full_IPT$new_indice_PT, method = "pearson")
IMI_IPT_M2002 <- IMI_IPT_T1 %>%
filter(ANO_INICIO_PROGRAMA > 2002)
dim(IMI_IPT_M2002)
summary(IMI_IPT_M2002)
corrplot(cor(IMI_IPT_M2002[,3:22]), method = "color", tl.cex = 0.5)
cor(IMI_IPT_M2002$Indice_MI, IMI_IPT_M2002$Indice_PT, method = "pearson")
IMI_IPT_M2002 <- IMI_IPT_T1 %>%
filter(ANO_INICIO_PROGRAMA > 2002)
dim(IMI_IPT_M2002)
summary(IMI_IPT_M2002)
corrplot(cor(IMI_IPT_M2002[,3:22]), method = "color", tl.cex = 0.5)
cor(IMI_IPT_M2002$Indice_MI, IMI_IPT_M2002$Indice_PT, method = "pearson")
cor(IMI_IPT_M2002$Indice_MI, IMI_IPT_M2002$new_indice_PT, method = "pearson")
IMI_IPT_M2002 <- IMI_IPT_T1 %>%
filter(ANO_INICIO_PROGRAMA > 2002)
dim(IMI_IPT_M2002)
summary(IMI_IPT_M2002)
corrplot(cor(IMI_IPT_M2002[,3:22]), method = "color", tl.cex = 0.5)
cor(IMI_IPT_M2002$Indice_MI, IMI_IPT_M2002$Indice_PT, method = "pearson")
cor(IMI_IPT_M2002$Indice_MI, IMI_IPT_M2002$new_indice_PT, method = "pearson")
cor(IMI_IPT_M2002$Forma_docente, IMI_IPT_M2002$new_indice_PT, method = "pearson")
IMI_IPT_M2002 <- IMI_IPT_T1 %>%
filter(ANO_INICIO_PROGRAMA > 2002)
dim(IMI_IPT_M2002)
summary(IMI_IPT_M2002)
corrplot(cor(IMI_IPT_M2002[,3:22]), method = "color", tl.cex = 0.5)
cor(IMI_IPT_M2002$Indice_MI, IMI_IPT_M2002$Indice_PT, method = "pearson")
cor(IMI_IPT_M2002$Indice_MI, IMI_IPT_M2002$new_indice_PT, method = "pearson")
cor(IMI_IPT_M2002$Forma_docente, IMI_IPT_M2002$new_indice_PT, method = "pearson")
cor(IMI_IPT_M2002$Forma_discente, IMI_IPT_M2002$new_indice_PT, method = "pearson")
IMI_IPT_M2002 <- IMI_IPT_T1 %>%
filter(ANO_INICIO_PROGRAMA > 2002)
dim(IMI_IPT_M2002)
summary(IMI_IPT_M2002)
corrplot(cor(IMI_IPT_M2002[,3:22]), method = "color", tl.cex = 0.5)
cor(IMI_IPT_M2002$Indice_MI, IMI_IPT_M2002$Indice_PT, method = "pearson")
cor(IMI_IPT_M2002$Indice_MI, IMI_IPT_M2002$new_indice_PT, method = "pearson")
cor(IMI_IPT_M2002$Forma_docente, IMI_IPT_M2002$new_indice_PT, method = "pearson")
cor(IMI_IPT_M2002$Forma_discente, IMI_IPT_M2002$new_indice_PT, method = "pearson")
cor(IMI_IPT_M2002$Colabora_cientifica, IMI_IPT_M2002$new_indice_PT, method = "pearson")
IMI_IPT_M2002 <- IMI_IPT_T1 %>%
filter(ANO_INICIO_PROGRAMA > 2002)
dim(IMI_IPT_M2002)
summary(IMI_IPT_M2002)
corrplot(cor(IMI_IPT_M2002[,3:22]), method = "color", tl.cex = 0.5)
cor(IMI_IPT_M2002$Indice_MI, IMI_IPT_M2002$Indice_PT, method = "pearson")
cor(IMI_IPT_M2002$Indice_MI, IMI_IPT_M2002$new_indice_PT, method = "pearson")
cor(IMI_IPT_M2002$Forma_docente, IMI_IPT_M2002$new_indice_PT, method = "pearson")
cor(IMI_IPT_M2002$Forma_discente, IMI_IPT_M2002$new_indice_PT, method = "pearson")
cor(IMI_IPT_M2002$Colabora_cientifica, IMI_IPT_M2002$new_indice_PT, method = "pearson")
cor(IMI_IPT_M2002$CP, IMI_IPT_M2002$new_indice_PT, method = "pearson")
View(M_State)
cor(IMI_IPT_Full_IPT$Forma_docente, IMI_IPT_Full_IPT$new_indice_PT, method = "pearson")
IMI_IPT_PRIV <- IMI_IPT_T1 %>%
filter(DS_DEPENDENCIA_ADMINISTRATIVA == 1)
dim(IMI_IPT_PRIV)
summary(IMI_IPT_PRIV)
corrplot(cor(IMI_IPT_PRIV[,3:22]), method = "color", tl.cex = 0.5)
## Indice total original
cor(IMI_IPT_PRIV$Indice_MI, IMI_IPT_PRIV$Indice_PT, method = "pearson")
## Indice Total novo
cor(IMI_IPT_PRIV$Indice_MI, IMI_IPT_PRIV$new_indice_PT, method = "pearson")
## Indice Formação docente
cor(IMI_IPT_PRIV$Forma_docente, IMI_IPT_PRIV$new_indice_PT, method = "pearson")
## Indice Formação discente
cor(IMI_IPT_PRIV$Forma_discente, IMI_IPT_PRIV$new_indice_PT, method = "pearson")
## Indice Calaboração cientifica
cor(IMI_IPT_PRIV$Colabora_cientifica, IMI_IPT_PRIV$new_indice_PT, method = "pearson")
## Indice contexto profissional
cor(IMI_IPT_PRIV$CP, IMI_IPT_PRIV$new_indice_PT, method = "pearson")
## Variaveis
M <- IMI_IPT_T1
# mu da amostra de produção de aplicativo
Media_Indice_MI <- mean(M$Indice_MI, na.rm = TRUE)
## mu de diversidade do universo: mu
Media_Prod_tecno <- mean(M$Indice_PT, na.rm = TRUE)
Context_m_acima <-
M %>%
dplyr::filter(Indice_MI > Media_Indice_MI,
Indice_PT > Media_Prod_tecno)
summary(Context_m_acima)
corrplot(cor(Context_m_acima[, 3:22]), method = "color", tl.cex = 0.5)
## Indice total original
cor(Context_m_acima$Indice_MI, Context_m_acima$Indice_PT, method = "pearson")
## Indice Total novo
cor(Context_m_acima$Indice_MI, Context_m_acima$new_indice_PT, method = "pearson")
## Indice Formação docente
cor(Context_m_acima$Forma_docente, Context_m_acima$new_indice_PT, method = "pearson")
## Indice Formação discente
cor(Context_m_acima$Forma_discente, Context_m_acima$new_indice_PT, method = "pearson")
## Indice Calaboração cientifica
cor(Context_m_acima$Colabora_cientifica, Context_m_acima$new_indice_PT, method = "pearson")
## Indice contexto profissional
cor(Context_m_acima$CP, Context_m_acima$new_indice_PT, method = "pearson")
Contex_Full <- M_State %>%
dplyr::select(SG_UF_PROGRAMA, Indice_MI, new_indice_PT)
Distances <- dist(Contex_Full)
dendrogram <- hclust(Distances)
plot(dendrogram)
rect.hclust(dendrogram, k=6, border=1:3)
plot(hclust(Distances, method="ward.D"), main="ward.D", hang=-1)
rect.hclust(hclust(Distances, method="ward.D"), k=5, border=1:5)
plot(hclust(Distances, method="centroid"), main="centroid", hang=-1)
rect.hclust(hclust(Distances, method="centroid"), k=5, border=1:5)
Kmeans_HW<- kmeans(Contex_Full,100 , iter.max = 5, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
HartiganWong<- cor(Kmeans_HW$centers[,2:2], Kmeans_HW$centers[,3:3] , method = "pearson")
plot(Contex_Full, col = Kmeans_HW$cluster)
points(Kmeans_HW$centers, col = 1:2, pch = 8, cex = 2)
Kmeans_Fo<- kmeans(Contex_Full, 10, iter.max = 5, nstart = 1,
algorithm = c("Forgy"), trace=FALSE)
Forgy <- cor(Kmeans_Fo$centers[,2:2], Kmeans_Fo$centers[,3:3] , method = "pearson")
Kmeans_Ma<- kmeans(Contex_Full, 10, iter.max = 5, nstart = 1,
algorithm = c("MacQueen"), trace=FALSE)
MacQueen <- cor(Kmeans_Ma$centers[,2:2], Kmeans_Ma$centers[,3:3] , method = "pearson")
Contex_Full <- M_State %>%
dplyr::select(SG_UF_PROGRAMA, Indice_MI, new_indice_PT)
Distances <- dist(Contex_Full)
dendrogram <- hclust(Distances)
plot(dendrogram)
rect.hclust(dendrogram, k=6, border=1:3)
plot(hclust(Distances, method="ward.D"), main="ward.D", hang=-1)
rect.hclust(hclust(Distances, method="ward.D"), k=5, border=1:5)
plot(hclust(Distances, method="centroid"), main="centroid", hang=-1)
rect.hclust(hclust(Distances, method="centroid"), k=5, border=1:5)
Kmeans_HW<- kmeans(Contex_Full,100 , iter.max = 5, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
HartiganWong<- cor(Kmeans_HW$centers[,2:2], Kmeans_HW$centers[,3:3] , method = "pearson")
plot(Contex_Full, col = Kmeans_HW$cluster)
points(Kmeans_HW$centers, col = 1:2, pch = 8, cex = 2)
Kmeans_Fo<- kmeans(Contex_Full, 10, iter.max = 5, nstart = 1,
algorithm = c("Forgy"), trace=FALSE)
Forgy <- cor(Kmeans_Fo$centers[,2:2], Kmeans_Fo$centers[,3:3] , method = "pearson")
Kmeans_Ma<- kmeans(Contex_Full, 10, iter.max = 5, nstart = 1,
algorithm = c("MacQueen"), trace=FALSE)
MacQueen <- cor(Kmeans_Ma$centers[,2:2], Kmeans_Ma$centers[,3:3] , method = "pearson")
Kmeans_Ma
Contex_Full <- M_State %>%
dplyr::select(CD_IES_PROGRAMA, Indice_MI, new_indice_PT)
Distances <- dist(Contex_Full)
dendrogram <- hclust(Distances)
plot(dendrogram)
rect.hclust(dendrogram, k=6, border=1:3)
plot(hclust(Distances, method="ward.D"), main="ward.D", hang=-1)
rect.hclust(hclust(Distances, method="ward.D"), k=5, border=1:5)
plot(hclust(Distances, method="centroid"), main="centroid", hang=-1)
rect.hclust(hclust(Distances, method="centroid"), k=5, border=1:5)
Kmeans_HW<- kmeans(Contex_Full,100 , iter.max = 5, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
HartiganWong<- cor(Kmeans_HW$centers[,2:2], Kmeans_HW$centers[,3:3] , method = "pearson")
plot(Contex_Full, col = Kmeans_HW$cluster)
points(Kmeans_HW$centers, col = 1:2, pch = 8, cex = 2)
Kmeans_Fo<- kmeans(Contex_Full, 10, iter.max = 5, nstart = 1,
algorithm = c("Forgy"), trace=FALSE)
Forgy <- cor(Kmeans_Fo$centers[,2:2], Kmeans_Fo$centers[,3:3] , method = "pearson")
Kmeans_Ma<- kmeans(Contex_Full, 10, iter.max = 5, nstart = 1,
algorithm = c("MacQueen"), trace=FALSE)
MacQueen <- cor(Kmeans_Ma$centers[,2:2], Kmeans_Ma$centers[,3:3] , method = "pearson")
Contex_Full <- M_State %>%
dplyr::select(CD_PROGRAMA_IES, Indice_MI, new_indice_PT)
Distances <- dist(Contex_Full)
dendrogram <- hclust(Distances)
plot(dendrogram)
rect.hclust(dendrogram, k=6, border=1:3)
plot(hclust(Distances, method="ward.D"), main="ward.D", hang=-1)
rect.hclust(hclust(Distances, method="ward.D"), k=5, border=1:5)
plot(hclust(Distances, method="centroid"), main="centroid", hang=-1)
rect.hclust(hclust(Distances, method="centroid"), k=5, border=1:5)
Kmeans_HW<- kmeans(Contex_Full,100 , iter.max = 5, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
HartiganWong<- cor(Kmeans_HW$centers[,2:2], Kmeans_HW$centers[,3:3] , method = "pearson")
plot(Contex_Full, col = Kmeans_HW$cluster)
points(Kmeans_HW$centers, col = 1:2, pch = 8, cex = 2)
Kmeans_Fo<- kmeans(Contex_Full, 10, iter.max = 5, nstart = 1,
algorithm = c("Forgy"), trace=FALSE)
Forgy <- cor(Kmeans_Fo$centers[,2:2], Kmeans_Fo$centers[,3:3] , method = "pearson")
Kmeans_Ma<- kmeans(Contex_Full, 10, iter.max = 5, nstart = 1,
algorithm = c("MacQueen"), trace=FALSE)
MacQueen <- cor(Kmeans_Ma$centers[,2:2], Kmeans_Ma$centers[,3:3] , method = "pearson")
Contex_Full <- M_State %>%
dplyr::select(CD_PROGRAMA_IES, Indice_MI, new_indice_PT)
Contex_Full <- na.omit(Contex_Full)
Distances <- dist(Contex_Full)
dendrogram <- hclust(Distances)
plot(dendrogram)
rect.hclust(dendrogram, k=6, border=1:3)
plot(hclust(Distances, method="ward.D"), main="ward.D", hang=-1)
rect.hclust(hclust(Distances, method="ward.D"), k=5, border=1:5)
plot(hclust(Distances, method="centroid"), main="centroid", hang=-1)
rect.hclust(hclust(Distances, method="centroid"), k=5, border=1:5)
Kmeans_HW<- kmeans(Contex_Full,100 , iter.max = 5, nstart = 25,
algorithm = c("Hartigan-Wong"), trace=FALSE)
HartiganWong<- cor(Kmeans_HW$centers[,2:2], Kmeans_HW$centers[,3:3] , method = "pearson")
plot(Contex_Full, col = Kmeans_HW$cluster)
points(Kmeans_HW$centers, col = 1:2, pch = 8, cex = 2)
Kmeans_Fo<- kmeans(Contex_Full, 10, iter.max = 5, nstart = 1,
algorithm = c("Forgy"), trace=FALSE)
Forgy <- cor(Kmeans_Fo$centers[,2:2], Kmeans_Fo$centers[,3:3] , method = "pearson")
Kmeans_Ma<- kmeans(Contex_Full, 10, iter.max = 5, nstart = 1,
algorithm = c("MacQueen"), trace=FALSE)
MacQueen <- cor(Kmeans_Ma$centers[,2:2], Kmeans_Ma$centers[,3:3] , method = "pearson")
kmeans()
kmeans
